{"version":3,"sources":["logo.svg","components/Nav.jsx","components/Search.jsx","utilities.js","components/Home.jsx","components/About.jsx","components/Discover.jsx","components/Favorites.jsx","components/MyRated.jsx","components/RatingModal.jsx","components/MoviePage.jsx","components/ResultPage.jsx","components/Controller.jsx","App.js","serviceWorker.js","index.js","images/genericMovie.png","images/movieLogo.png","images/dblogo.svg"],"names":["module","exports","styles","color","textDecoration","Nav","className","Image","src","logo","roundedCircle","style","to","exact","Search","e","preventDefault","window","location","replace","target","userInput","value","onSubmit","this","handleSubmit","InputGroup","Prepend","Text","FormControl","type","name","React","Component","dateStr","year","slice","month","day","parseMonth","Home","props","changeTitle","title","setState","prevState","searchTitle","handleChange","val","getData","state","films","render","apiUrl","a","async","fetch","util","response","ok","json","retrunState","results","alert","status","workingState","i","push","items","filmArr","map","film","Card","bg","width","Img","poster_path","alt","genericMovie","variant","Body","Title","Subtitle","vote_average","release_date","overview","id","Button","ButtonToolbar","ToggleButtonGroup","defaultValue","onChange","ToggleButton","renderRes","About","dblogo","href","options","label","storage","Discover","customSort","customToggle","sort","b","toggleState","c","key","sortResult","subtitle","renderFalse","bind","checkedValues","genreQuery","apiQuery","length","forEach","genre","callApi","query","console","log","onClick","Group","onSelect","renderFilms","Favorites","favorites","favId","storageArray","JSON","parse","localStorage","getItem","passApiData","filmIDArray","element","movieId","filmJson","filmArray","concat","favoriteArray","renderItems","MyRated","ratings","rateId","filmId","rating","userRating","ratingsArray","Footer","editing","renderStarIcon","starCount","RatingModal","newUserRating","closeModal","setItem","stringify","nextValue","prevValue","userRate","isOpen","openWindow","overlay","backgroundColor","margin","marginTop","borderRadius","zIndex","content","onStarClick","MoviePage","openModal","_","match","params","filmCard","size","userFav","favoritesArray","ResultPage","queryString","words","split","word","movieTitle","parseToken","total_results","topResult","top","renderTop","shift","Controller","path","component","App","Boolean","hostname","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.7949d48d.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.ee7cd8ed.svg\";","import React from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\nimport Image from 'react-bootstrap/Image';\r\nimport logo from '../images/movieLogo.png'\r\n\r\nconst styles = { color: 'white', textDecoration: 'none' }\r\n\r\nconst Nav = () => (\r\n\t<nav className=\"navBar\">\r\n     <Image  className=\"logo\" src={logo} roundedCircle /> \r\n        <ul>\r\n            <li><NavLink style={styles} to=\"/\" exact>Home</NavLink></li>\r\n            <li><NavLink style={styles} to=\"/about\">About</NavLink></li>\r\n            <li><NavLink style={styles} to=\"/discover\">Discover</NavLink></li>\r\n            <li><NavLink style={styles} to=\"/favorites\">Your Favorites</NavLink></li>\r\n            <li><NavLink style={styles} to=\"/ratings\">Your Ratings</NavLink></li>\r\n        </ul>\r\n\t</nav>\r\n);\r\n\r\nexport default Nav;","import React from 'react';\r\nimport InputGroup  from 'react-bootstrap/InputGroup';\r\nimport FormControl from 'react-bootstrap/FormControl';\r\n\r\n\r\nclass Search  extends React.Component {\r\n\r\n  handleSubmit(e){\r\n    e.preventDefault()\r\n    window.location.replace(`/search/${e.target.userInput.value}`)\r\n  }\r\n\r\n  render() {\r\n    return (\r\n     <section className=\"searchBar\"> \r\n      <form  onSubmit={this.handleSubmit}>\r\n    <InputGroup className=\"mb-3\">\r\n      <InputGroup.Prepend>\r\n      <InputGroup.Text> Search movie by title: </InputGroup.Text>\r\n      </InputGroup.Prepend>\r\n      <FormControl type=\"text\" name=\"userInput\"/>\r\n    </InputGroup>\r\n    </form>\r\n  </section>\r\n      );\r\n    }\r\n}\r\n\r\nexport default Search;","const token = \"5010e01fe46a79047256333f2727c644\";\r\n\r\nconst parseDate = (dateStr) => {\r\n    let year = dateStr.slice(0, 4)\r\n    let month = dateStr.slice(5, 7)\r\n    let day = dateStr.slice(8, 10)\r\n    let parseMonth = \"\";\r\n  \r\n    switch(month){\r\n      case \"01\":\r\n        parseMonth = \"January\";\r\n      break;\r\n      case \"02\":\r\n          parseMonth = \"Febuary\";\r\n      break;\r\n      case \"03\":\r\n          parseMonth = \"March\";\r\n      break;\r\n      case \"04\":\r\n          parseMonth = \"April\";\r\n      break;\r\n      case \"05\":\r\n          parseMonth = \"May\";\r\n      break;\r\n      case \"06\":\r\n          parseMonth = \"June\";\r\n      break;\r\n      case \"07\":\r\n          parseMonth = \"July\";\r\n      break;\r\n      case \"08\":\r\n          parseMonth = \"August\";\r\n      break;\r\n      case \"09\":\r\n          parseMonth = \"September\";\r\n      break;\r\n      case \"10\":\r\n          parseMonth = \"October\";\r\n      break;\r\n      case \"11\":\r\n          parseMonth = \"November\";\r\n      break;\r\n      case \"12\":\r\n          parseMonth = \"December\";\r\n      break;\r\n    }\r\n  \r\n    return `${parseMonth} ${day}, ${year}`\r\n    }\r\n\r\n\r\nexport default {token, parseDate};","import React from 'react';\r\nimport Nav from './Nav'\r\nimport genericMovie from '../images/genericMovie.png'\r\nimport { NavLink } from 'react-router-dom';\r\nimport Search from './Search'\r\n\r\n//bootstrap components\r\nimport Card from 'react-bootstrap/Card';\r\nimport Button from 'react-bootstrap/Button'\r\nimport ToggleButtonGroup from 'react-bootstrap/ToggleButtonGroup';\r\nimport ToggleButton from 'react-bootstrap/ToggleButton';\r\nimport ButtonToolbar from 'react-bootstrap/ButtonToolbar';\r\n\r\n//utilities required here\r\nimport util from '../utilities'\r\n\r\n\r\nclass Home extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      films: null,\r\n      render: false,\r\n      searchTitle: \"Most Popular:\"\r\n    }\r\n  }  \r\n\r\n  componentDidMount(){\r\n    this.getData(\"https://api.themoviedb.org/3/discover/movie?&sort_by=popularity.desc\");\r\n  }\r\n\r\n\r\n  //fetch top 12 from api\r\n  getData(apiUrl){\r\n    let res = (async () => { let response = await fetch(`${apiUrl}&api_key=${util.token}&language=en-US&page=1`);\r\n\r\n    if (response.ok) { \r\n      let json = await response.json();\r\n      this.retrunState(json.results)\r\n    } else {\r\n      alert(\"HTTP-Error: \" + response.status);\r\n    }\r\n     })();\r\n  }\r\n\r\n \r\n  //pass the api result to components state\r\n  retrunState(json){\r\n  let workingState = [];\r\n\r\n    for(let i = 0; i < 12; i++){\r\n      workingState.push(json[i])\r\n    }\r\n    this.setState((prevState) => { return { films: workingState, render: true}})\r\n  }\r\n\r\n\r\n  //return rendered list of movies\r\n  renderRes(items){\r\n    let filmArr =  items.map(film =>  ( \r\n  <Card bg=\"light\" style={{ width: '20rem' }} className=\"filmCard\" >\r\n  <Card.Img src={`https://image.tmdb.org/t/p/w185_and_h278_bestv2/${film.poster_path}`} alt={genericMovie}  variant=\"top\"/>\r\n  <Card.Body>\r\n    <Card.Title> {film.title} </Card.Title> \r\n    <Card.Subtitle className=\"rating\"> Users Rating: {film.vote_average * 10} % </Card.Subtitle>\r\n    <Card.Subtitle className=\"rating\"> {util.parseDate(film.release_date)} </Card.Subtitle>\r\n    <Card.Text>\r\n     {film.overview}\r\n    </Card.Text>\r\n  </Card.Body>\r\n   <NavLink to={`/movie/${film.id}`} > <Button variant=\"primary\"> Click to find out more. </Button>   </NavLink> \r\n</Card>\r\n     ));\r\n    return (  <div className=\"titlesContainer\"> { filmArr} </div>)\r\n  }\r\n\r\n\r\n  changeTitle = title =>  this.setState((prevState) => { return { searchTitle: title} })\r\n\r\n\r\n  //make new request to API\r\n   handleChange = val =>  {\r\n    switch (val) {\r\n      case 1:\r\n      this.getData(\"https://api.themoviedb.org/3/discover/movie?&sort_by=popularity.desc\")\r\n      this.changeTitle(\"Most popular:\")\r\n      break;\r\n      case 2: \r\n      this.getData(\"https://api.themoviedb.org/3/movie/top_rated?\") \r\n      this.changeTitle(\"Top Rated:\")\r\n      break;\r\n      case 3:\r\n      this.getData(\"https://api.themoviedb.org/3/movie/upcoming?&sort_by=primary_release_date.desc\")\r\n      this.changeTitle(\"Upcomming Films:\")\r\n      break;\r\n      case 4:\r\n      this.getData(\"https://api.themoviedb.org/3/movie/now_playing?&primary_release_date.desc\")\r\n      this.changeTitle(\"Now Playing:\")\r\n      break;\r\n    }\r\n   }\r\n\r\n    render() {\r\n      return (\r\n      <div>\r\n        <Nav></Nav>\r\n      <div className=\"contentWrap\"> \r\n       <h1>Home</h1>\r\n        <Search></Search>\r\n      <section className=\"topResultBox\">\r\n        <div>\r\n        <h2> {this.state.searchTitle} </h2>\r\n      <ButtonToolbar>\r\n    <ToggleButtonGroup className=\"buttonToggle\" type=\"radio\" name=\"options\" defaultValue={[1]} onChange={this.handleChange}>\r\n      <ToggleButton value={1}> Most Popular </ToggleButton>\r\n      <ToggleButton value={2}> Top Rated </ToggleButton>\r\n      <ToggleButton value={3}> Upcomming </ToggleButton>\r\n      <ToggleButton value={4}> Now Playing </ToggleButton>\r\n    </ToggleButtonGroup>\r\n  </ButtonToolbar>\r\n          {this.state.render ? this.renderRes(this.state.films) : \" \" } \r\n          </div>\r\n      </section>\r\n       </div>\r\n      </div>\r\n      );\r\n    }\r\n  }\r\n\r\nexport default Home;","import React from 'react';\r\nimport Nav from './Nav'\r\nimport dblogo from '../images/dblogo.svg'\r\n\r\n\r\n//5010e01fe46a79047256333f2727c644 \r\n\r\nclass About extends React.Component {\r\n    render() {\r\n      return <div>\r\n        <Nav></Nav>\r\n        <div className=\"contentWrap\"> \r\n        <div className=\"aboutTag\">\r\n        <h1>About: </h1>\r\n        <img src={dblogo} className=\"movieDbLogo\"/>\r\n        <section>\r\n         <p> This product uses the TMDb API but is not endorsed or certified by TMDb. </p>\r\n         <p> More info: <a href=\"https://www.themoviedb.org/faq/api\"> The Movie DB APi</a> </p>\r\n        </section>\r\n        </div>\r\n        </div>\r\n       </div>\r\n    }\r\n  }\r\n\r\nexport default About;","import React from 'react';\r\nimport Nav from './Nav'\r\nimport genericMovie from '../images/genericMovie.png'\r\nimport { NavLink } from 'react-router-dom';\r\nimport util from '../utilities'\r\n\r\n//bootstrap components\r\nimport Card from 'react-bootstrap/Card';\r\nimport Button from 'react-bootstrap/Button'\r\nimport ToggleButtonGroup from 'react-bootstrap/ToggleButtonGroup';\r\nimport ToggleButton from 'react-bootstrap/ToggleButton';\r\nimport ButtonToolbar from 'react-bootstrap/ButtonToolbar';\r\n\r\nimport { Checkbox } from 'antd';\r\n//docs: https://ant.design/components/checkbox/\r\n\r\nconst options = [\r\n  { label: 'Action', value: '28' },\r\n  { label: 'Adventure', value: '12' },\r\n  { label: 'Animation', value: '16' },\r\n  { label: 'Comedy', value: '35' },\r\n  { label: 'Crime', value: '80' },\r\n  { label: 'Documentary', value: '99' },\r\n  { label: 'Drama', value: '18' },\r\n  { label: 'Family', value: '10751' },\r\n  { label: 'Fantasy', value: '14' },\r\n  { label: 'History', value: '36' },\r\n  { label: 'Horror', value: '27' },\r\n  { label: 'Music', value: '10402' },\r\n  { label: 'Mystery', value: '9648' },\r\n  { label: 'Romance', value: '10749' },\r\n  { label: 'Science Fiction', value: '878' },\r\n  { label: 'TV Movie', value: '10770' },\r\n  { label: 'Thriller', value: '53' },\r\n  { label: 'War', value: '10752' },\r\n  { label: 'Western', value: '37' }\r\n];\r\n\r\nlet storage = []\r\n\r\n\r\nclass Discover extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      render: false,\r\n      films: null,\r\n      searchTitle: \"Most Popular:\",\r\n      customSort: \"Highest/Lowest Rating\",\r\n      customToggle: {\"a\": false, \"b\": false, \"c\": false},\r\n      renderFalse: false\r\n    }\r\n    this.handleSubmit = this.handleSubmit.bind(this);\r\n  }\r\n\r\n  \r\n  //grab checkbox values \r\n  onSelect(checkedValues) {\r\n    storage = checkedValues\r\n  }\r\n\r\n\r\n  //grab user inputs, build query string\r\n  handleSubmit(e){\r\n    e.preventDefault()\r\n    let year = e.target.year.value\r\n    let genreQuery = \"\"\r\n    let apiQuery = \"\"\r\n\r\n    if (storage.length > 1){\r\n      storage.forEach(genre => {\r\n        genreQuery += genre += \",\"\r\n      })\r\n      apiQuery = `https://api.themoviedb.org/3/discover/movie?api_key=${util.token}&language=en-US&sort_by=popularity.desc&page=1&with_genres=${genreQuery.slice(0, -1)}&primary_release_year=${year}`\r\n    } else if (storage.length === 1) {\r\n      apiQuery = `https://api.themoviedb.org/3/discover/movie?api_key=${util.token}&language=en-US&sort_by=popularity.desc&page=1&with_genres=${storage[0]}&primary_release_year=${year}`\r\n    } else {\r\n    apiQuery = `https://api.themoviedb.org/3/discover/movie?api_key=${util.token}&language=en-US&sort_by=popularity.desc&page=1&primary_release_year=${year}`\r\n    }\r\n\r\n     this.callApi(apiQuery)\r\n  }\r\n\r\n\r\n  callApi(query){\r\n     let res = (async () => { let response = await fetch(query);\r\n\r\n     if (response.ok) { \r\n       let json = await response.json();\r\n       if (json.results.length === 0){\r\n         this.retrunState(false)\r\n       }  else if(json.results.length > 0) {\r\n         console.log(json.results.length)\r\n          this.retrunState(json.results)\r\n       }\r\n     } else {\r\n       alert(\"HTTP-Error: \" + response.status);\r\n     }\r\n      })();\r\n  }\r\n\r\n\r\n  //pass top 12 API results to state\r\n  retrunState(json){\r\n    if (json === false){\r\n     return this.setState((prevState) => { return { renderFalse: true, render: false, films: null}})\r\n    } else {\r\n    let workingState = [];\r\n  \r\n      for(let i = 0; i < 12; i++){\r\n        workingState.push(json[i])\r\n      }\r\n    return  this.setState((prevState) => { return { films: workingState, render: true, renderFalse: false}})\r\n    }\r\n  }\r\n  \r\n\r\n  //render results to view\r\n  renderFilms(items){\r\n    let filmArr =  items.map(film =>  ( \r\n  <Card bg=\"light\" style={{ width: '20rem' }} className=\"filmCard\" >\r\n  <Card.Img src={`https://image.tmdb.org/t/p/w185_and_h278_bestv2/${film.poster_path}`} alt={genericMovie}  variant=\"top\"/>\r\n  <Card.Body>\r\n    <Card.Title> {film.title} </Card.Title> \r\n    <Card.Subtitle className=\"rating\"> Users Rating: {film.vote_average * 10} % </Card.Subtitle>\r\n    <Card.Subtitle className=\"rating\"> {util.parseDate(film.release_date)} </Card.Subtitle>\r\n    <Card.Text>\r\n     {film.overview}\r\n    </Card.Text>\r\n  </Card.Body>\r\n   <NavLink to={`/movie/${film.id}`} > <Button variant=\"primary\"> Click to find out more. </Button>   </NavLink> \r\n</Card>\r\n     ));\r\n  return (  <div>  <h3> {this.state.searchTitle} </h3> <div className=\"titlesContainer\">  { filmArr} </div>  <Button onClick={ () => this.customSort(this.state.customSort)}> {this.state.customSort} </Button> </div>)\r\n  }\r\n\r\n\r\ncustomSort = val => {\r\n  switch (val) {\r\n    case \"Highest/Lowest Rating\":\r\n      if (this.state.customToggle.a === false){\r\n        this.state.films.sort((a,b) => (b.vote_average < a.vote_average) ? 1 : ((a.vote_average < b.vote_average) ? -1 : 0))\r\n        this.toggleState(\"a\", true)\r\n      } else {\r\n        this.state.films.sort((a,b) => (a.vote_average < b.vote_average) ? 1 : ((b.vote_average < a.vote_average) ? -1 : 0))\r\n        this.toggleState(\"a\", false)\r\n      }\r\n    \r\n    break \r\n    case \"Oldest/Newest\":\r\n      if (this.state.customToggle.b === false){\r\n        this.state.films.sort((a,b) => (b.release_date > a.release_date) ? 1 : ((a.release_date > b.release_date) ? -1 : 0))\r\n        this.toggleState(\"b\", true)\r\n      } else {\r\n        this.state.films.sort((a,b) => (a.release_date > b.release_date) ? 1 : ((b.release_date > a.release_date) ? -1 : 0))\r\n        this.toggleState(\"b\", false)\r\n      }\r\n    break \r\n    case \"A-Z / Z-A\":\r\n      if (this.state.customToggle.c === false){\r\n        this.state.films.sort((a,b) => (b.title > a.title) ? 1 : ((a.title > b.title) ? -1 : 0))\r\n        this.toggleState(\"c\", true)\r\n      } else {\r\n        this.state.films.sort((a,b) => (a.title > b.title) ? 1 : ((b.title > a.title) ? -1 : 0))\r\n        this.toggleState(\"c\", false)\r\n      }\r\n    break \r\n  }\r\n}\r\n\r\n\r\n  //toggle for custom switch\r\n  toggleState = (key, val) => {\r\n    this.setState({\r\n      customToggle : {...this.state.customToggle, [key]: val }\r\n  })\r\n  }\r\n\r\n\r\n  sortResult = val =>  {\r\n    switch (val) {\r\n      case 1:\r\n        this.state.films.sort((a,b) => (a.vote_average < b.vote_average) ? 1 : ((b.vote_average < a.vote_average) ? -1 : 0))\r\n        this.changeTitle(\"Most popular:\", \"Highest/Lowest Rating\")\r\n      break;\r\n      case 2: \r\n      this.state.films.sort((a,b) => (a.release_date > b.release_date) ? 1 : ((b.release_date > a.release_date) ? -1 : 0))\r\n      this.changeTitle(\"Release Date:\", \"Oldest/Newest\")\r\n      break;\r\n      case 3:\r\n        this.state.films.sort((a,b) => (a.title > b.title) ? 1 : ((b.title > a.title) ? -1 : 0))\r\n      this.changeTitle(\"Results:\", \"A-Z / Z-A\")\r\n      break;\r\n    }\r\n   }\r\n\r\n\r\n   changeTitle = (title, subtitle) =>  this.setState((prevState) => { return { searchTitle: title, customSort: subtitle} })\r\n\r\n\r\n    render() {\r\n      return <div>\r\n        <Nav></Nav>\r\n        <div className=\"contentWrap\"> \r\n        <h1>Discover: </h1>\r\n        <div className=\"checkBox\">\r\n          <form onSubmit={this.handleSubmit}>\r\n            <h5> Genere: </h5>\r\n    <Checkbox.Group className=\"check\" options={options}  onChange={this.onSelect} />\r\n    <h5>Year of release: </h5>\r\n    <input type=\"text\" name=\"year\"/>\r\n    </form>\r\n   </div>\r\n       <div className=\"topResultBox\"> \r\n         {this.state.render ?  <div> <h3> Sort By: </h3> <ButtonToolbar>\r\n    <ToggleButtonGroup className=\"buttonToggle\" type=\"radio\" name=\"options\" defaultValue={[1]} onChange={this.sortResult}>\r\n      <ToggleButton value={1}> Rating </ToggleButton>\r\n      <ToggleButton value={2}> Release Date </ToggleButton>\r\n      <ToggleButton value={3}> Title </ToggleButton>\r\n    </ToggleButtonGroup>\r\n  </ButtonToolbar> \r\n  {this.state.renderFalse ? \"No matching search result, please try something else.\" : \" \"}\r\n  {this.state.render ? this.renderFilms(this.state.films) : \"No matching search result, please try something else.\"}\r\n  </div> : \"\"}\r\n       </div>\r\n        </div>\r\n        </div>\r\n    }\r\n  }\r\n\r\nexport default Discover;","import React from 'react';\r\nimport Nav from './Nav'\r\nimport { NavLink } from 'react-router-dom';\r\nimport genericMovie from '../images/genericMovie.png'\r\nimport Search from './Search'\r\n\r\n//bootstrap \r\nimport Card from 'react-bootstrap/Card';\r\nimport Button from 'react-bootstrap/Button'\r\n\r\n//utilities\r\nimport util from '../utilities'\r\n\r\n\r\nclass Favorites extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      favorites: [],\r\n      favId: null\r\n    }\r\n  }  \r\n\r\n\r\n  //grab local storage data and pass to state, if user has favs\r\n  componentDidMount(){\r\n    let storageArray =  JSON.parse(localStorage.getItem(\"favorites\"))\r\n    if (storageArray.length > 0){\r\n      this.setState((prevState) => { return { favId: storageArray} })\r\n    }\r\n    this.passApiData(storageArray)\r\n  }\r\n\r\n\r\n  //make API call for each movie ID\r\n  passApiData(filmIDArray){\r\n    filmIDArray.forEach(element => this.callApi(element));\r\n  }\r\n\r\n\r\n  //pass  each API call to state\r\n  callApi(movieId){\r\n    let res = (async () => { let response = await fetch(`https://api.themoviedb.org/3/movie/${movieId}?api_key=${util.token}&language=en-US`);\r\n\r\n    if (response.ok) { \r\n      let filmJson = await response.json();\r\n      let filmArray = this.state.favorites.concat(filmJson);\r\n      this.setState({ favorites: filmArray })\r\n    } else {\r\n      alert(\"HTTP-Error: \" + response.status);\r\n    }\r\n     })();\r\n  }\r\n\r\n  \r\n  renderItems(favoriteArray){\r\n    let filmArr =  favoriteArray.map(film =>  ( \r\n      <Card bg=\"light\" style={{ width: '20rem' }} className=\"filmCard\" >\r\n      <Card.Img src={`https://image.tmdb.org/t/p/w185_and_h278_bestv2/${film.poster_path}`} alt={genericMovie}  variant=\"top\"/>\r\n      <Card.Body>\r\n        <Card.Title> {film.title} </Card.Title> \r\n        <Card.Subtitle className=\"rating\"> Users Rating: {film.vote_average * 10} % </Card.Subtitle>\r\n        <Card.Subtitle className=\"rating\"> {util.parseDate(film.release_date)} </Card.Subtitle>\r\n        <Card.Text>\r\n         {film.overview}\r\n        </Card.Text>\r\n      </Card.Body>\r\n       <NavLink to={`/movie/${film.id}`} > <Button variant=\"primary\"> Click to find out more. </Button> </NavLink> \r\n    </Card>\r\n         ));\r\n        return (  <div className=\"favBox\"> { filmArr} </div>)\r\n  }\r\n\r\n\r\n    render() {\r\n      return( <div>\r\n        <Nav></Nav>\r\n        <div className=\"contentWrap\"> \r\n        <h1>Favorites: </h1>\r\n        <Search></Search>\r\n        {this.state.favId != null ? this.renderItems(this.state.favorites) : <h1> Sorry you have no favorites </h1> }\r\n        </div>\r\n        </div>\r\n      )\r\n    }\r\n  }\r\n\r\nexport default Favorites;","import React from 'react';\r\nimport Nav from './Nav'\r\nimport { NavLink } from 'react-router-dom';\r\nimport genericMovie from '../images/genericMovie.png'\r\nimport Search from './Search'\r\n\r\n//bootstrap \r\nimport Card from 'react-bootstrap/Card';\r\nimport Button from 'react-bootstrap/Button'\r\nimport StarRatingComponent from 'react-star-rating-component';\r\n\r\n//utilities\r\nimport util from '../utilities'\r\n\r\n\r\nclass MyRated extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      ratings: [],\r\n      rateId: null\r\n    }\r\n  }  \r\n\r\n\r\n  //grab local storage data and pass to state, if user has ratings\r\n  componentDidMount(){\r\n    let storageArray =  JSON.parse(localStorage.getItem(\"ratings\"))\r\n    if (storageArray.length > 0){\r\n      this.setState((prevState) => { return { rateId: storageArray} })\r\n    }\r\n    this.passApiData(storageArray)\r\n  }\r\n\r\n\r\n  //make API call for each movie ID\r\n  passApiData(filmIDArray){\r\n    filmIDArray.forEach(element => this.callApi(element.filmId, element.rating));\r\n  }\r\n\r\n\r\n  //pass  each API call to state\r\n  callApi(movieId, rating){\r\n    let res = (async () => { let response = await fetch(`https://api.themoviedb.org/3/movie/${movieId}?api_key=${util.token}&language=en-US`);\r\n    if (response.ok) { \r\n      let filmJson = await response.json();\r\n      filmJson.userRating = rating\r\n      let filmArray = this.state.ratings.concat(filmJson);\r\n      this.setState({ ratings: filmArray })\r\n    } else {\r\n      alert(\"HTTP-Error: \" + response.status);\r\n    }\r\n     })();\r\n  }\r\n\r\n  \r\n  renderItems(ratingsArray){\r\n    let filmArr =  ratingsArray.map(film =>  ( \r\n      <Card bg=\"light\" style={{ width: '20rem' }} className=\"filmCard\" >\r\n      <Card.Img src={`https://image.tmdb.org/t/p/w185_and_h278_bestv2/${film.poster_path}`} alt={genericMovie}  variant=\"top\"/>\r\n      <Card.Body>\r\n        <Card.Title> {film.title} </Card.Title> \r\n        <Card.Subtitle className=\"rating\"> Users Rating: {film.vote_average * 10} % </Card.Subtitle>\r\n        <Card.Subtitle className=\"rating\"> {util.parseDate(film.release_date)} </Card.Subtitle>\r\n        <Card.Text>\r\n         {film.overview}\r\n        </Card.Text>\r\n      </Card.Body>\r\n      <NavLink to={`/movie/${film.id}`} > <Button variant=\"primary\"> Click to find out more. </Button>   </NavLink> \r\n       <Card.Footer>\r\n      <span className=\"text-muted\"> Your rating:  <StarRatingComponent \r\n          name=\"rate2\" \r\n          editing={false}\r\n          renderStarIcon={() => <span> ⭐ </span>}\r\n          starCount={film.userRating}\r\n          value={film.userRating}\r\n        />   </span>\r\n    </Card.Footer>\r\n    </Card>\r\n         ));\r\n        return (  <div className=\"favBox\"> { filmArr} </div>)\r\n  }\r\n\r\n\r\n    render() {\r\n      return( <div>\r\n        <Nav></Nav>\r\n        <div className=\"contentWrap\"> \r\n        <h1>Your Ratings: </h1>\r\n        <Search></Search>\r\n        {this.state.rateId != null ? this.renderItems(this.state.ratings) : <h1> Sorry you have no rated movies. Search for a movie to add to your favourites </h1> }\r\n        </div>\r\n        </div>\r\n      )\r\n    }\r\n  }\r\n\r\nexport default MyRated;","import React from 'react';\r\nimport ReactModal from 'react-modal';\r\n\r\nimport StarRatingComponent from 'react-star-rating-component';\r\n// docs: https://www.npmjs.com/package/react-star-rating-component\r\n\r\n\r\nclass RatingModal extends React.Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      rating: 0\r\n    };\r\n  }\r\n\r\n    \r\n  //open rating modal and add rating to local storage, if not already present.\r\n  userRate(filmId, rating){\r\n    let newUserRating = {filmId: filmId, rating: rating}\r\n\r\n    let ratingsArray =  JSON.parse(localStorage.getItem(\"ratings\"))\r\n\r\n    for (let i = 0; i < ratingsArray.length; i++) {\r\n      if(ratingsArray[i].filmId === filmId){\r\n        ratingsArray[i].rating = rating\r\n        this.props.closeModal()\r\n        return localStorage.setItem('ratings', JSON.stringify(ratingsArray))\r\n      } \r\n    }\r\n\r\n    ratingsArray.push(newUserRating)\r\n\r\n    localStorage.setItem('ratings', JSON.stringify(ratingsArray))\r\n    this.props.closeModal()\r\n  }\r\n\r\n\r\n  onStarClick(nextValue, prevValue, name) {\r\n    this.setState({rating: nextValue});\r\n    this.userRate(this.props.filmId, nextValue)\r\n  }\r\n \r\n\r\n    render(){\r\n        return( \r\n             <div> <ReactModal isOpen={this.props.openWindow}  style={{ overlay: {backgroundColor: \"rgb(102, 120, 156)\", margin: \"6%\", marginTop: \"12%\", borderRadius: \"10px\", zIndex: \"10\"}, content: { width: \"82vw\"} } } > \r\n            <h2>Rate this movie: </h2>\r\n\r\n            <div className=\"inserStar\">\r\n            <StarRatingComponent \r\n            className=\"userStar\"\r\n             name=\"rate1\" \r\n             starCount={5}\r\n             value={this.state.rating}\r\n             onStarClick={this.onStarClick.bind(this)}\r\n             />\r\n             </div>\r\n\r\n            <button className=\"modalCancel\" onClick={this.props.closeModal}> Cancel </button>\r\n             </ReactModal> \r\n             </div> \r\n             )\r\n         }\r\n}\r\n\r\nexport default RatingModal;","import React from 'react';\r\nimport Nav from './Nav'\r\nimport Search from './Search'\r\nimport RatingModal from './RatingModal'\r\nimport { NavLink } from 'react-router-dom';\r\n\r\n//bootstrap components\r\nimport Button from 'react-bootstrap/Button'\r\nimport Card from 'react-bootstrap/Card';\r\n\r\n//utilities\r\nimport util from '../utilities'\r\nimport genericMovie from '../images/genericMovie.png'\r\n\r\n\r\nclass MoviePage extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      film: null,\r\n      render: false,\r\n      openWindow: false\r\n    }\r\n  }  \r\n\r\n  componentDidMount(){\r\n    this.getData(this.props.match.params.id);\r\n  }\r\n\r\n  //fetch movie ID from API\r\n  getData(movieId){\r\n    let res = (async () => { let response = await fetch(`https://api.themoviedb.org/3/movie/${movieId}?api_key=${util.token}&language=en-US`);\r\n\r\n    if (response.ok) { \r\n      let json = await response.json();\r\n      this.setState((prevState) => { return { film: json, render: true}})\r\n    } else {\r\n      alert(\"HTTP-Error: \" + response.status);\r\n    }\r\n     })();\r\n  }\r\n\r\n  //render the film to page\r\n  renderRes(film){\r\n\r\n    let filmArr = []\r\n    filmArr.push(film)\r\n   return this.filmCard(filmArr)\r\n  }\r\n\r\n\r\n  filmCard(filmArray){\r\n    return filmArray.map(film =>  ( \r\n       <Card bg=\"light\" style={{ width: '20rem' }} className=\"filmCard\" >\r\n       <Card.Img src={`https://image.tmdb.org/t/p/w185_and_h278_bestv2/${film.poster_path}`} alt={genericMovie}  variant=\"top\"/>\r\n       <Card.Body>\r\n         <Card.Title> {film.title} </Card.Title> \r\n         <Card.Subtitle className=\"rating\"> Users Rating: {film.vote_average * 10} % </Card.Subtitle>\r\n         <Card.Subtitle className=\"rating\"> {util.parseDate(film.release_date)} </Card.Subtitle>\r\n         <Card.Text>\r\n          {film.overview}\r\n         </Card.Text>\r\n         <Button variant=\"primary\" size=\"lg\" id=\"fav\" onClick={ () => {this.userFav(this.props.match.params.id)}}>\r\n          Favorite this movie\r\n        </Button>\r\n       <Button variant=\"primary\" size=\"lg\" onClick={this.openModal}>\r\n         Rate this movie\r\n      </Button>\r\n       </Card.Body>\r\n     </Card>\r\n          ));\r\n   }\r\n\r\n  //add user fav to local storage, if not already present.\r\n  userFav(filmId){\r\n     let favoritesArray =  JSON.parse(localStorage.getItem(\"favorites\"))\r\n\r\n    for (let i = 0; i < favoritesArray.length; i++) {\r\n       if(favoritesArray[i] === filmId){\r\n        return;\r\n       } \r\n     }\r\n\r\n     favoritesArray.push(filmId)\r\n     localStorage.setItem('favorites', JSON.stringify(favoritesArray))\r\n  }\r\n  \r\n\r\n    openModal = _ => this.setState((prevState) => { return { openWindow: true}})\r\n    \r\n\r\n    closeModal = _ => this.setState((prevState) => { return { openWindow: false}})\r\n    \r\n\r\n    render() {\r\n      return (\r\n      <div>\r\n        <Nav></Nav>\r\n        <div className=\"contentWrap\"> \r\n        <Search></Search>\r\n           <div className=\"indivMov\">  \r\n             {this.state.render ?  this.renderRes(this.state.film) : \" \" } \r\n             {this.state.openWindow ?  <RatingModal openWindow={this.state.openWindow} filmId={this.props.match.params.id} closeModal={this.closeModal}/> : \"\" }\r\n           </div>\r\n          <span><NavLink to=\"/\" exact>Back Home</NavLink></span>\r\n        </div>\r\n      </div>\r\n      )\r\n    }\r\n  }\r\n\r\nexport default MoviePage;","import React from 'react';\r\nimport Nav from './Nav'\r\nimport Search from './Search'\r\nimport { NavLink } from 'react-router-dom';\r\n\r\n//bootstrap components\r\nimport Button from 'react-bootstrap/Button'\r\nimport Card from 'react-bootstrap/Card';\r\n\r\n//utilities\r\nimport util from '../utilities'\r\nimport genericMovie from '../images/genericMovie.png'\r\n\r\n\r\nclass ResultPage extends React.Component {\r\n    constructor(props) {\r\n      super(props);\r\n      this.state = {\r\n        films: null, \r\n        render: false\r\n      }\r\n    }  \r\n\r\n    componentDidMount(){\r\n      this.getData(this.props.match.params.id)\r\n    }\r\n\r\n    //parse query string for API\r\n    parseToken(query){\r\n      let queryString = \"\"\r\n      let words = query.split(\" \")\r\n\r\n      if (words.length > 1){\r\n        words.forEach(word => {\r\n          queryString += `${word}+`\r\n        });\r\n        queryString = queryString.slice(0, -1); \r\n      } else {\r\n        queryString = query\r\n      }\r\n      return queryString\r\n    }\r\n\r\n    //call API with movie title\r\n    getData(movieTitle){\r\n      let query = this.parseToken(movieTitle)\r\n      let res = (async () => { let response = await fetch(`https://api.themoviedb.org/3/search/movie?api_key=${util.token}&query=${query}`);\r\n  \r\n      if (response.ok) { \r\n        let json = await response.json();\r\n        if (json.total_results > 0) {\r\n          this.retrunState(json.results)\r\n        } \r\n      } else {\r\n        alert(\"HTTP-Error: \" + response.status);\r\n      }\r\n       })();\r\n    }\r\n\r\n    //pass api results to state\r\n    retrunState(json){\r\n      console.log(json)\r\n      let workingState = [];\r\n    \r\n        for(let i = 0; i < 8; i++){\r\n          if (json[i]){\r\n            workingState.push(json[i])\r\n          }\r\n        }\r\n        this.setState((prevState) => { return { films: workingState, render: true}})\r\n      }\r\n\r\n\r\n\r\n      //render query results to page from state\r\n      renderRes(items){\r\n        let topResult = []\r\n        let top = items[0]\r\n        topResult.push(top)\r\n\r\n        let renderTop =   this.filmCard(topResult)\r\n\r\n        items.shift()\r\n        let filmArr =  this.filmCard(items) \r\n\r\n        return (  <div> <div className=\"resultHeader\"> <h2>Top Result: </h2> {renderTop}  <h2> Other Results: </h2> </div>  <div className=\"favBox\"> { filmArr} </div> </div>)\r\n      }\r\n\r\n\r\n      filmCard(filmArray){\r\n       return filmArray.map(film =>  ( \r\n          <Card bg=\"light\" style={{ width: '20rem' }} className=\"filmCard\" >\r\n          <Card.Img src={`https://image.tmdb.org/t/p/w185_and_h278_bestv2/${film.poster_path}`} alt={genericMovie}  variant=\"top\"/>\r\n          <Card.Body>\r\n            <Card.Title> {film.title} </Card.Title> \r\n            <Card.Subtitle className=\"rating\"> Users Rating: {film.vote_average * 10} % </Card.Subtitle>\r\n            <Card.Subtitle className=\"rating\"> {util.parseDate(film.release_date)} </Card.Subtitle>\r\n            <Card.Text>\r\n             {film.overview}\r\n            </Card.Text>\r\n          </Card.Body>\r\n           <NavLink to={`/movie/${film.id}`} > <Button variant=\"primary\"> Click to find out more. </Button>   </NavLink> \r\n        </Card>\r\n             ));\r\n      }\r\n      \r\n\r\n    render() {\r\n        return <div>\r\n          <Nav></Nav>\r\n          <div className=\"contentWrap\">\r\n          <h1>Your Result: </h1>\r\n              <Search></Search>\r\n           <div>\r\n             {this.state.render ?  this.renderRes(this.state.films) : \"No matching search result, please try something else.\" } \r\n           </div>\r\n           <span><NavLink to=\"/\" exact>Back Home</NavLink></span>\r\n           </div>\r\n          </div>\r\n      }\r\n}\r\n\r\nexport default ResultPage;","import React from 'react';\r\nimport { BrowserRouter as Router, Route, Link } from \"react-router-dom\";\r\nimport Home from './Home';\r\nimport About from './About';\r\nimport Discover from './Discover';\r\nimport Favorites from './Favorites';\r\nimport MyRated from './MyRated';\r\nimport MoviePage from './MoviePage';\r\nimport ResultPage from './ResultPage';\r\n\r\nclass Controller extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n      }\r\n\r\n      componentDidMount(){\r\n        let favoritesArray = [];\r\n        let ratingsArray = [];\r\n\r\n        if (localStorage.getItem(\"favorites\") === null ){\r\n          localStorage.setItem('favorites', JSON.stringify(favoritesArray))\r\n        }\r\n\r\n        if (localStorage.getItem(\"ratings\") === null ){\r\n          localStorage.setItem('ratings', JSON.stringify(ratingsArray))\r\n        }\r\n      }\r\n\r\n      render(){\r\n          return (\r\n            <div> \r\n             <Router>\r\n\t         \t<div>\r\n\t\t\t\t<Route path=\"/\" exact> <Home /> </Route>\r\n\t\t\t\t<Route path=\"/about\"> <About /> </Route>\r\n\t\t\t\t<Route path=\"/discover\"> <Discover /> </Route>\r\n\t\t\t\t<Route path=\"/favorites\"> <Favorites /> </Route>\r\n        <Route path=\"/ratings\"> <MyRated /> </Route>\r\n        <Route path=\"/movie/:id\"  component={MoviePage} /> \r\n        <Route path=\"/search/:id\"  component={ResultPage} /> \r\n\t        \t</div>\r\n\t         </Router>\r\n            </div>\r\n          )\r\n      }\r\n    }\r\n\r\nexport default Controller;","import React from 'react';\r\nimport logo from './logo.svg';\r\nimport './App.css';\r\nimport Controller from './components/Controller';\r\nimport './styles/styles.scss';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\nfunction App() {\r\n  return (\r\n    <div>\r\n     <Controller></Controller>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","module.exports = __webpack_public_path__ + \"static/media/genericMovie.96a00d42.png\";","module.exports = __webpack_public_path__ + \"static/media/movieLogo.58dc5e36.png\";","module.exports = __webpack_public_path__ + \"static/media/dblogo.27b65cb4.svg\";"],"sourceRoot":""}